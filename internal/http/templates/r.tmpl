# https://cran.r-project.org/web/packages/influxdbr/index.html
library(influxdbr)

# Create a connection to InfluxDB.
#
# INFO: For security reasons we cannot include username and password here.
#       Please create a ticket at https://support.scientificnet.org with the following
#       information: 
#
#       Subject: InfluxDB: Access to LTER "{{.Database}}" Database
#       Text: Please create a username and password for accessing the LTER "{{.Database}}" database.
#
con <- influx_connection(scheme = c("https"),
    host = "ts.eurac.net",
    port = 443,
    user = "",
    pass = "")

# Test if the connection works.
# influx_ping(con)

# Show all measurements
#
# m <- show_measurements(con = con, db = "lter")
# landuse_me <- show_measurements(con = con, db = "lter", where = "landuse='me'")
# station_m3 <- show_measurements(con = con, db = "lter", where = "station='m3'")

# Get timeseries results as tibbles.
#
# INFO: All data inside InfluxDB is in UTC, but the data of the LTSER IT25 Matsch Mazia
#       side is recorded in UTC+1. By adding the 'tc' clause at the end we can specify
#       a timezone. For LTER use 'Etc/GMT-1' to avoid problems daylight saving time
#       problems.
result <- influx_query(con,
    db = '{{.Database}}',
    query = "{{.Query}}",
    return_xts = FALSE)


# to_drop : a character vector with tags to exclude because either 
# they make the merge not possible or are not useful
to_drop = c("series_names","series_tags" ,
            "statement_id","series_partial",
            "snipeit_location_ref","unit","aggr")

# select the table
result  = as.data.frame(result[[1]])
# excludes columns (tags) to drop
result  = result[!names(result)%in% to_drop]

# possible tags: a list of possible tags in the database - needed to select 
#the measurements as columns
possible_tags = c("time","station","landuse","altitude","latitude","longitude",
                  "series_names","series_tags" ,"statement_id","series_partial",
                  "snipeit_location_ref","unit","aggr")

# list the measurements as those that are not tags ()
measurements = names(result)[!names(result)%in% possible_tags]

if(length(measurements)> 1){
  
  # subset_data: a function that splits the dowloaded table in 1 table per measurement
  # (this is needed for the merge function)
  subset_data =  function (measurement,result){
    
    result <- result[!is.na(result[measurement]),]
    result <- result[,colSums(is.na(result))<nrow(result)]
    return(result)
    
  }
  
  # for loop to split the different measurements
  result = lapply(measurements, subset_data ,result)
  # to merge all the measurements tables
  result <- Reduce(
    function(x, y, ...) merge(x, y, all = TRUE, ...),
    result
  ) 
}
head(result)